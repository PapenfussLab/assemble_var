@@ merge refactor => master
@@ review site for paper?

auto-memory setting.

find-knot speedup:
   - too many redundant rounds of partitioning?

memory improvement for counting hash

sequence loading into both counting & hashbits

graphsize filtering with stop-big-traversal

why does stop-big-traversal still connect???

cython integrate!

pull reads into partitions?

look more assiduously for memory leaks

----

counting hash generalization to n < 8 bits => memory efficiency

load-counting/bigcount loading is slooooow

----

screed bzip
screed slice
screed fasta/fastq output

screed streaming foo

---

fix tests cleanup
pyrex/cython stuff
script testing
docs!

---

the N dilemma

---


put in logging.

fix tests and test cases to properly isolate/remove temp files.

fix dir(ht)

rename new_hashtable to new_countinghash

###

Semi-obsolete comments, pre partitioning:

also, can probably arrange parallelization split & hash table size so
that modulus exactly fills split portion of table.

mismatch hashing - compute min num - each base?

copyright, C++ file comments at top; license; etc.

tests for readmask updating, etc. in various circumstances!

tests for khmer saturation vs valid reads

profiling


reading on hash functions:

 http://www.burtleburtle.net/bob/hash/doobs.html
 http://www.burtleburtle.net/bob/c/lookup3.c
 http://www.burtleburtle.net/bob/hash/doobs.html
 http://www.codinghorror.com/blog/2007/12/hashtables-pigeonholes-and-birthdays.html
 http://www.ncbi.nlm.nih.gov/pmc/articles/PMC1131890/

things to reference or at least look at:

  http://sourceforge.net/apps/mediawiki/kmer/index.php?title=Getting_Started_with_Meryl
  http://www.hgsc.bcm.tmc.edu/cascade-tech-software_bang-ti.hgsc
  http://www.hgsc.bcm.tmc.edu/cascade-tech-software_cbt-ti.hgsc
  http://code.google.com/p/google-sparsehash/
